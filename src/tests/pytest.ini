[tool:pytest]
# Pytest configuration file
addopts = 
    --strict-markers
    --strict-config
    --asyncio-mode=auto
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --tb=short
    -v

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Async test configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (medium, with external dependencies)
    e2e: End-to-end tests (slow, full system)
    slow: Slow running tests
    external: Tests requiring external services
    telegram: Tests for Telegram bot functionality
    domain: Domain layer tests
    application: Application layer tests
    infrastructure: Infrastructure layer tests
    presentation: Presentation layer tests

# Minimum version requirements
minversion = 7.0

# Test paths
testpaths = 
    src/tests

# Ignore patterns
norecursedirs = 
    .git
    .tox
    dist
    build
    __pycache__
    .pytest_cache

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = src
omit = 
    src/tests/*
    src/*/test_*
    src/*/*/test_*
    */conftest.py
    */tests/*
    .venv/*
    venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

